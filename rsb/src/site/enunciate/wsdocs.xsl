<?xml version="1.0" encoding="UTF-8"?>
<!--
    R Service Bus
    
    Copyright (c) Copyright of Open Analytics NV, 2010-2023
 
    ===========================================================================
 
    This file is part of R Service Bus.

    R Service Bus is free software: you can redistribute it and/or modify
    it under the terms of the Apache License as published by
    The Apache Software Foundation, either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    Apache License for more details.

    You should have received a copy of the Apache License
    along with R Service Bus.  If not, see <http://www.apache.org/licenses/>.
        
    @author rsb.development@openanalytics.eu
-->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0" exclude-result-prefixes="#default" xmlns:redirect="http://xml.apache.org/xalan/redirect" extension-element-prefixes="redirect">

  <!--Our output is XHTML, so XML will do...-->
  <xsl:output method="xml" omit-xml-declaration="no" indent="yes"
              doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"
              doctype-public="-//W3C//DTD XHTML 1.0 Transitional//EN" />

  <!--Whether the XML file describing the downloads exists.-->
  <xsl:param name="downloads-exists" select="false()"/>

  <!--The output directory for the files generated by this template.-->
  <xsl:param name="output-dir" select="'./'"/>

  <!--The relative path at which the endpoints are mounted.-->
  <xsl:param name="api-relative-path" select="'.'"/>

  <!--The name of the index page.-->
  <xsl:param name="index-page-name" select="'index.html'"/>

  <!-- Whether this API contains SOAP endpoints. -->
  <xsl:variable name="soapAvailable" select="boolean(/api-docs/soap/wsdls/wsdl/endpointInterface)"/>

  <!--Whether this API contains REST endpoints.-->
  <xsl:variable name="restful" select="boolean(/api-docs/rest/resources/resource)"/>

  <!--Whether there's more than one schema-->
  <xsl:variable name="multiple_schemas" select="count(/api-docs/data/schema) &gt; 1"/>

  <!--The characters to translate from a REST name.-->
  <!--The '/' is replaced with a '.', the ':' is replaced with a '-', and the '{' and '}' are removed-->
  <xsl:variable name="rest_translate_chars">/:{}</xsl:variable>
  <xsl:variable name="rest_translate_replacements">.-</xsl:variable>

  <!--Whether the XML file describing the downloads exists.-->
  <xsl:param name="disable-rest-mountpoint" select="false()"/>

  <!--The global side navigation (the navigation that is always there).-->
  <xsl:variable name="global-sidnav">
    <h1>Home</h1>
    <ul>
      <li><a href="{$index-page-name}">API Overview</a></li>
      <xsl:if test="$downloads-exists">
        <li>
          <a href="downloads.html">Downloads</a>
        </li>
      </xsl:if>
      <li><a href="../index.html">Back to RSB Documentation</a></li>
    </ul>

    <xsl:if test="$restful">
      <h1>REST Endpoints</h1>
      <ul>
        <xsl:for-each select="/api-docs/rest/resources/resource">
          <xsl:sort select="@name"/>
          <li><a href="rest{translate(@name,$rest_translate_chars,$rest_translate_replacements)}.html"><xsl:value-of select="@name"/></a></li>
        </xsl:for-each>
      </ul>
    </xsl:if>

    <xsl:if test="$soapAvailable">
      <h1>SOAP Services</h1>
      <ul>
        <xsl:for-each select="/api-docs/soap/wsdls/wsdl/endpointInterface">
          <xsl:sort select="@name"/>
          <li>
            <xsl:choose>
              <xsl:when test="tag[@name='deprecated']">
                <font style="text-decoration:line-through;">
                  <a href="soap_{../@namespaceId}_{@name}.html"><xsl:value-of select="@name"/></a>
                </font>
              </xsl:when>
              <xsl:otherwise>
                <a href="soap_{../@namespaceId}_{@name}.html"><xsl:value-of select="@name"/></a>
              </xsl:otherwise>
            </xsl:choose>
          </li>
        </xsl:for-each>
      </ul>
    </xsl:if>

    <xsl:if test="/api-docs/data/schema/elements/element">
      <h1>XML Data Elements</h1>
      <ul>
        <xsl:for-each select="/api-docs/data/schema/elements/element">
          <xsl:sort select="@name"/>
          <xsl:sort select="../../@namespace"/>
          <li>
            <xsl:choose>
              <xsl:when test="tag[@name='deprecated']">
                <font style="text-decoration:line-through;">
                  <a href="data_{../../@namespaceId}.html#element_{@name}"><xsl:value-of select="@name"/><xsl:if test="$multiple_schemas"> (<xsl:value-of select="../../@namespaceId"/>)</xsl:if></a>
                </font>
              </xsl:when>
              <xsl:otherwise>
                <a href="data_{../../@namespaceId}.html#element_{@name}"><xsl:value-of select="@name"/><xsl:if test="$multiple_schemas"> (<xsl:value-of select="../../@namespaceId"/>)</xsl:if></a>
              </xsl:otherwise>
            </xsl:choose>
          </li>
        </xsl:for-each>
      </ul>
    </xsl:if>

    <xsl:if test="/api-docs/data/schema/types/type">
      <h1>XML Data Types</h1>
      <ul>
        <xsl:for-each select="/api-docs/data/schema/types/type">
          <xsl:sort select="@name"/>
          <xsl:sort select="../../@namespace"/>
          <li>
            <xsl:choose>
              <xsl:when test="tag[@name='deprecated']">
                <font style="text-decoration:line-through;">
                  <a href="data_{../../@namespaceId}.html#{@name}"><xsl:value-of select="@name"/><xsl:if test="$multiple_schemas"> (<xsl:value-of select="../../@namespaceId"/>)</xsl:if></a>
                </font>
              </xsl:when>
              <xsl:otherwise>
                <a href="data_{../../@namespaceId}.html#{@name}"><xsl:value-of select="@name"/><xsl:if test="$multiple_schemas"> (<xsl:value-of select="../../@namespaceId"/>)</xsl:if></a>
              </xsl:otherwise>
            </xsl:choose>
          </li>
        </xsl:for-each>
      </ul>
    </xsl:if>

    <xsl:if test="/api-docs/data/jsonSchema/type">
      <h1>JSON Data Types</h1>
      <ul>
        <xsl:for-each select="/api-docs/data/jsonSchema/type">
          <xsl:sort select="@name" />
          <xsl:sort select="../@schemaId" />
          <li><a href="data_{../@schemaId}.html#{@name}"><xsl:value-of select="@name"/><xsl:if test="$multiple_schemas"> (<xsl:value-of select="../@schemaId"/>)</xsl:if></a></li>
        </xsl:for-each>
      </ul>
    </xsl:if>
  </xsl:variable>


  <!--The footer for each page.-->
  <xsl:variable name="footer">
    <div class="footer" align="center">
      <xsl:if test="/api-docs/@copyright"><xsl:text disable-output-escaping="yes">&#38;</xsl:text>#169; <xsl:value-of select="/api-docs/@copyright"/>.</xsl:if>
      Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
    </div>
  </xsl:variable>


  <!--The main template. Generates the index page and is the invoker for the other templates as necessary.-->
  <xsl:template match="/">
    <html>
      <head>
        <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
        <xsl:for-each select="/api-docs/tag">
          <meta name="{@name}" content="{.}"/>
        </xsl:for-each>
        <link rel="stylesheet" type="text/css" href="css/style.css" media="screen"/>
        <link rel="stylesheet" type="text/css" href="css/prettify.css" media="screen"/>

        <title>
          <xsl:value-of select="/api-docs/@title"/>
        </title>
      </head>

      <body>
        <div class="container">

          <div class="main">

            <div class="header">
              <div class="title">
                <h1>
                  <xsl:value-of select="/api-docs/@title"/>
                </h1>
              </div>
            </div>

            <div class="content">

              <xsl:if test="/api-docs/documentation">
                <!--Include an introduction if there is top-level documentation.-->
                <div class="item">
                  <h1>Introduction</h1>
                  <p>
                    <xsl:value-of select="/api-docs/documentation" disable-output-escaping="yes"/>
                  </p>
                </div>
              </xsl:if>

              <xsl:if test="$restful">
                <div class="item">

                  <h1>REST</h1>

                  <p>
                    This API supports a <a href="http://en.wikipedia.org/wiki/Representational_State_Transfer">Representational State Transfer (REST)</a>
                    model for accessing a set of resources through a fixed set of operations. The following resources are accessible through the RESTful model:
                  </p>

                  <ul>
                    <xsl:for-each select="/api-docs/rest/resources/resource">
                      <xsl:sort select="@name"/>
                      <li><a href="rest{translate(@name,$rest_translate_chars,$rest_translate_replacements)}.html"><xsl:value-of select="@name"/></a></li>
                      <xsl:call-template name="rest-resource"/>
                    </xsl:for-each>
                  </ul>
                  <xsl:if test="/api-docs/rest/@wadl">

                    <p>
                      There is also a <a href="{/api-docs/rest/@wadl}">WADL document</a> describing the REST API.
                    </p>
                  </xsl:if>
                </div>
              </xsl:if>

              <xsl:if test="$soapAvailable">
                <div class="item">

                  <h1>SOAP</h1>

                  <p>
                    This API is exposed through a set of <a href="http://www.ws-i.org/Profiles/BasicProfile-1.0.html">WSI Basic Profile</a>
                    -compliant SOAP v1.1 endpoints. The API supports <a href="http://www.w3.org/TR/2005/REC-xop10-20050125/">XML-binary Optimized Pacakging (XOP)</a>
                    and <a href="http://www.w3.org/TR/2004/WD-soap12-mtom-20040608/">SOAP Message Transmission Optimization Mechanism (MTOM)</a>
                    for transmission of binary data. The SOAP API is fully described by the following endpoints:
                  </p>

                  <ul>
                    <xsl:for-each select="/api-docs/soap/wsdls/wsdl">
                      <xsl:sort select="@namespace"/>
                      <xsl:variable name="nsid" select="@namespaceId"/>
                      <xsl:for-each select="endpointInterface">
                        <xsl:sort select="@name"/>
                        <li>
                          <xsl:choose>
                            <xsl:when test="tag[@name='deprecated']">
                              <font style="text-decoration:line-through;">
                                <a href="soap_{$nsid}_{@name}.html"><xsl:value-of select="@name"/></a>
                              </font> <xsl:if test="@file">(<a href="{@file}">wsdl</a>)</xsl:if>
                            </xsl:when>
                            <xsl:otherwise>
                              <a href="soap_{$nsid}_{@name}.html"><xsl:value-of select="@name"/></a> <xsl:if test="@file">(<a href="{@file}">wsdl</a>)</xsl:if>
                            </xsl:otherwise>
                          </xsl:choose>
                        </li>
                        <xsl:call-template name="soap-endpoint"/>
                      </xsl:for-each>
                    </xsl:for-each>
                  </ul>

                  <xsl:if test="$downloads-exists">
                    <p>
                      The SOAP API is also accessible by client-side libraries that can be downloaded from the <a href="downloads.html">download page</a>.
                    </p>
                  </xsl:if>

                </div>
              </xsl:if>

              <xsl:if test="/api-docs/data/schema/types/type|/api-docs/data/jsonSchema">
                <div class="item">

                  <h1>Data</h1>

                  <p>
                    All endpoints act on a common set of data. The data can be represented in different data formats (i.e. MIME types), depending on the endpoint
                    that consumes and/or produces the data. The data can described by <a href="http://www.w3.org/XML/Schema">XML Schema</a>, which definitively
                    describes the XML representation of the data, but is also useful for describing the other formats of the data, such as
                    <a href="http://json.org">JSON</a>.
                  </p>

                  <p>
                    This document will describe the data using terms based on <a href="http://www.w3.org/XML/Schema">XML Schema</a>.
                    Data can be grouped by namespace, with a schema document describing the <i>elements</i> and <i>types</i> of the namespace.
                    Generally speaking, <i>types</i> define the structure of the data and <i>elements</i> are <i>instances</i> of a type. For example,
                    <i>elements</i> are usually produced by (or consumed by) a REST endpoint, and the structure of each element is described by
                    its <i>type</i>.
                  </p>

                  <h2>Data Schemas</h2>
                  <table>
                    <tr>
                      <th>id</th>
                      <th>namespace</th>
                      <th>schema file</th>
                    </tr>
                    <xsl:for-each select="/api-docs/data/jsonSchema">
                      <xsl:sort select="@schemaId"/>
                      <tr>
                        <td><xsl:value-of select="@schemaId"/></td>
                        <td>N/A</td>
                        <td>
                          <xsl:choose>
                            <xsl:when test="@file"><a href="{@file}"><xsl:value-of select="@file"/></a></xsl:when>
                            <xsl:otherwise>(none)</xsl:otherwise>
                          </xsl:choose>
                        </td>
                      </tr>
                      <xsl:call-template name="data-json-schema"/>
                    </xsl:for-each>
                    <xsl:for-each select="/api-docs/data/schema">
                      <xsl:sort select="@namespace"/>
                      <xsl:variable name="nsid" select="@namespaceId"/>
                      <xsl:variable name="ns" select="@namespace"/>
                      <tr>
                        <td><xsl:value-of select="$nsid"/></td>
                        <td>
                          <xsl:choose>
                            <xsl:when test="string-length($ns) = 0">Default Namespace</xsl:when>
                            <xsl:otherwise><xsl:value-of select="@namespace"/></xsl:otherwise>
                          </xsl:choose>
                        </td>
                        <td>
                          <xsl:choose>
                            <xsl:when test="@file"><a href="{@file}"><xsl:value-of select="@file"/></a></xsl:when>
                            <xsl:otherwise>(none)</xsl:otherwise>
                          </xsl:choose>
                        </td>
                      </tr>
                      <xsl:call-template name="data-schema"/>
                    </xsl:for-each>
                  </table>

                  <xsl:if test="/api-docs/data/schema/elements/element">
                    <h2>XML Data Elements</h2>
                    <ul>
                      <xsl:for-each select="/api-docs/data/schema">
                        <xsl:sort select="@namespace"/>
                        <xsl:variable name="nsid" select="@namespaceId"/>
                        <xsl:if test="elements/element">
                          <li>
                            namespace <a href="data_{$nsid}.html"><xsl:value-of select="$nsid"/></a>
                            <ul>
                              <xsl:for-each select="elements/element">
                                <xsl:sort select="@name"/>
                                <li>
                                  <xsl:choose>
                                    <xsl:when test="tag[@name='deprecated']">
                                      <font style="text-decoration:line-through;">
                                        <a href="data_{$nsid}.html#element_{@name}"><xsl:value-of select="@name"/></a>
                                      </font>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <a href="data_{$nsid}.html#element_{@name}"><xsl:value-of select="@name"/></a>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </li>
                              </xsl:for-each>
                            </ul>
                          </li>
                        </xsl:if>
                      </xsl:for-each>
                    </ul>
                  </xsl:if>

                  <h2>XML Data Types</h2>
                  <ul>
                    <xsl:for-each select="/api-docs/data/schema">
                      <xsl:sort select="@namespace"/>
                      <xsl:variable name="nsid" select="@namespaceId"/>
                      <xsl:if test="types/type">
                        <li>
                          namespace <a href="data_{$nsid}.html"><xsl:value-of select="$nsid"/></a>
                          <ul>
                            <xsl:for-each select="types/type">
                              <xsl:sort select="@name"/>
                              <li>
                                <xsl:choose>
                                  <xsl:when test="tag[@name='deprecated']">
                                    <font style="text-decoration:line-through;">
                                      <a href="data_{$nsid}.html#{@name}"><xsl:value-of select="@name"/></a>
                                    </font>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <a href="data_{$nsid}.html#{@name}"><xsl:value-of select="@name"/></a>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </li>
                            </xsl:for-each>
                          </ul>
                        </li>
                      </xsl:if>
                    </xsl:for-each>
                  </ul>
                </div>

                  <xsl:if test="/api-docs/data/jsonSchema">
                    <h2>JSON Data Types</h2>
                    <ul>
                      <xsl:for-each select="/api-docs/data/jsonSchema">
                        <xsl:sort select="@schemaId"/>
                        <xsl:if test="type">
                          <li>
                            schema <a href="data_{@schemaId}.html"><xsl:value-of select="@schemaId"/></a>
                            <ul>
                              <xsl:for-each select="type">
                                <xsl:sort select="@name"/>
                                <li>
                                  <a href="data_{../@schemaId}.html#{@name}"><xsl:value-of select="@name"/></a>
                                </li>
                              </xsl:for-each>
                            </ul>
                          </li>
                        </xsl:if>
                      </xsl:for-each>
                    </ul>
                  </xsl:if>
              </xsl:if>

            </div>

            <div class="sidenav">
              <xsl:copy-of select="$global-sidnav"/>
            </div>

            <div class="clearer">
              <span></span>
            </div>

          </div>

          <xsl:copy-of select="$footer"/>

        </div>

      </body>

    </html>
    <xsl:if test="$downloads-exists">
      <xsl:call-template name="downloads"/>
    </xsl:if>
  </xsl:template>


  <!--The page for a soap endpoint.-->
  <xsl:template name="soap-endpoint">
    <redirect:write file="{$output-dir}/soap_{../@namespaceId}_{@name}.html">
      <html>

        <head>
          <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
          <link rel="stylesheet" type="text/css" href="css/style.css" media="screen"/>
          <link rel="stylesheet" type="text/css" href="css/prettify.css" media="screen"/>
          <title>
            <xsl:value-of select="/api-docs/@title"/>
          </title>
        </head>

        <body>

          <div class="container">

            <div class="main">

              <div class="header">
                <div class="title">
                  <h1><xsl:value-of select="/api-docs/@title"/></h1>
                </div>
              </div>

              <div class="content">

                <div class="item">

                  <h1><xsl:value-of select="@name"/></h1>

                  <xsl:if test="tag[@name='deprecated']">
                    <p class="deprecated">
                      This endpoint has been deprecated.  <xsl:value-of select="tag[@name='deprecated']" disable-output-escaping="yes"/>
                    </p>
                  </xsl:if>

                  <xsl:if test="documentation">
                    <p>
                      <xsl:value-of select="documentation" disable-output-escaping="yes"/>
                    </p>
                  </xsl:if>

                  <h2>Endpoint Metadata</h2>
                  <div class="subcontent">
                    <ul>
                      <xsl:choose>
                        <xsl:when test="string-length(../@namespace) = 0">
                          <li>Default Namespace</li>
                        </xsl:when>
                        <xsl:otherwise>
                          <li>Namespace: <u><xsl:value-of select="../@namespace"/></u></li>
                        </xsl:otherwise>
                      </xsl:choose>
                      <li>WSDL: <a href="{../@file}"><xsl:value-of select="../@file"/></a></li>
                      <xsl:if test="@path">
                        <li>Mount Point: <a href="{concat($api-relative-path,@path)}"><xsl:value-of select="@path"/></a></li>
                      </xsl:if>
                    </ul>
                  </div>

                  <xsl:if test="method">
                    <p>
                      The following methods are available on this endpoint:
                    </p>

                    <ul>
                      <xsl:for-each select="method">
                        <xsl:sort select="@name"/>
                        <li>
                          <xsl:choose>
                            <xsl:when test="tag[@name='deprecated']">
                              <font style="text-decoration:line-through;">
                                <a href="#{@name}"><xsl:value-of select="@name"/></a>
                              </font>
                            </xsl:when>
                            <xsl:otherwise>
                              <a href="#{@name}"><xsl:value-of select="@name"/></a>
                            </xsl:otherwise>
                          </xsl:choose>
                        </li>
                      </xsl:for-each>
                    </ul>
                  </xsl:if>

                </div>

                <xsl:for-each select="method">
                  <xsl:sort select="@name"/>
                  <div class="item">

                    <h1><a name="{@name}"><xsl:value-of select="@name"/></a></h1>

                    <xsl:if test="tag[@name='deprecated']">
                      <p class="deprecated">
                        This method has been deprecated.  <xsl:value-of select="tag[@name='deprecated']" disable-output-escaping="yes"/>
                      </p>
                    </xsl:if>

                    <xsl:if test="documentation">
                      <p>
                        <xsl:value-of select="documentation" disable-output-escaping="yes"/>
                      </p>
                    </xsl:if>

                    <xsl:if test="parameter[@input='true']">
                      <h2>Input Parameters</h2>
                      <table>
                        <tr>
                          <th>name</th>
                          <!--todo: add the parameter type and whether its a collection-->
                          <th>description</th>
                        </tr>
                        <xsl:for-each select="parameter[@input='true']">
                          <tr>
                            <td><xsl:value-of select="@name"/></td>
                            <td><xsl:value-of select="." disable-output-escaping="yes"/></td>
                          </tr>
                        </xsl:for-each>
                      </table>
                    </xsl:if>

                    <xsl:if test="parameter[@output='true']">
                      <h2>Output Parameters</h2>
                      <table>
                        <tr>
                          <th>name</th>
                          <!--todo: add the parameter type and whether its a collection-->
                          <th>description</th>
                        </tr>
                        <xsl:for-each select="parameter[@output='true']">
                          <tr>
                            <td><xsl:value-of select="@name"/></td>
                            <td><xsl:value-of select="." disable-output-escaping="yes"/></td>
                          </tr>
                        </xsl:for-each>
                      </table>
                    </xsl:if>

                    <xsl:if test="@oneWay='true'">
                      <p><b>**This method is one-way.</b></p>
                    </xsl:if>

                    <xsl:if test="result">
                      <h2>Return Value</h2>
                      <!--todo: put the return value type.-->

                      <p><xsl:value-of select="result" disable-output-escaping="yes"/></p>
                    </xsl:if>

                    <xsl:if test="fault">
                      <h2>Faults</h2>
                      <table>
                        <tr>
                          <th>name</th>
                          <th>description</th>
                        </tr>
                        <xsl:for-each select="fault">
                          <xsl:sort select="@name"/>
                          <tr>
                            <td><xsl:value-of select="@name"/></td>
                            <td><xsl:value-of select="." disable-output-escaping="yes"/></td>
                          </tr>
                        </xsl:for-each>
                      </table>
                    </xsl:if>

                  </div>
                </xsl:for-each>
            </div>

          <div class="sidenav">
            <h1><xsl:value-of select="@name"/></h1>
            <xsl:if test="method">
              <ul>
                <xsl:for-each select="method">
                  <xsl:sort select="@name"/>
                  <li>
                    <xsl:choose>
                      <xsl:when test="tag[@name='deprecated']">
                        <font style="text-decoration:line-through;">
                          <a href="#{@name}"><xsl:value-of select="@name"/></a>
                        </font>
                      </xsl:when>
                      <xsl:otherwise>
                        <a href="#{@name}"><xsl:value-of select="@name"/></a>
                      </xsl:otherwise>
                    </xsl:choose>
                  </li>
                </xsl:for-each>
              </ul>
            </xsl:if>

            <xsl:copy-of select="$global-sidnav"/>
          </div>

          <div class="clearer"><span></span></div>

        </div>

        <xsl:copy-of select="$footer"/>

      </div>

      </body>

      </html>
    </redirect:write>
  </xsl:template>


  <!--The page for downloads.-->
  <xsl:template name="downloads">
    <redirect:write file="{$output-dir}/downloads.html">
      <xsl:variable name="downloads-xml" select="document('downloads.xml')"/>

      <html>

        <head>
          <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
          <link rel="stylesheet" type="text/css" href="css/style.css" media="screen"/>
          <link rel="stylesheet" type="text/css" href="css/prettify.css" media="screen"/>
          <title>
            <xsl:value-of select="/api-docs/@title"/>
          </title>
        </head>

        <body>

          <div class="container">

            <div class="main">

              <div class="header">
                <div class="title">
                  <h1><xsl:value-of select="/api-docs/@title"/></h1>
                </div>
              </div>

              <div class="content">
                <div class="item">

                  <h1>Introduction</h1>

                  <p>
                    The following items are available for download:
                  </p>

                  <ul>
                    <xsl:for-each select="$downloads-xml/downloads/download">
                      <li><a href="#{@name}"><xsl:value-of select="@name"/></a></li>
                    </xsl:for-each>
                  </ul>

                </div>

                <xsl:for-each select="$downloads-xml/downloads/download">
                  <div class="item">

                    <h1><a name="{@name}"><xsl:value-of select="@name"/></a></h1>

                    <xsl:if test="created">
                      <p class="descr">Created <xsl:value-of select="created"/><xsl:if test="platform"> for <xsl:value-of select="platform"/></xsl:if>.</p>
                    </xsl:if>

                    <p>
                      <xsl:value-of select="description" disable-output-escaping="yes"/>
                    </p>

                    <xsl:choose>
                      <xsl:when test="count(files/file) &gt; 1">
                        <h2>Files</h2>
                        <table>
                          <tr>
                            <th>file</th>
                            <th>size</th>
                            <th>description</th>
                          </tr>
                          <xsl:for-each select="files/file">
                            <tr>
                              <td><a href="{@name}"><xsl:value-of select="@name"/></a></td>
                              <td><xsl:value-of select="@size"/></td>
                              <td><xsl:value-of select="." disable-output-escaping="yes"/></td>
                            </tr>
                          </xsl:for-each>
                        </table>
                      </xsl:when>
                      <xsl:otherwise>
                        <table>
                          <tr>
                            <th>file</th>
                            <th>size</th>
                          </tr>
                          <xsl:for-each select="files/file">
                            <tr>
                              <td><a href="{@name}"><xsl:value-of select="@name"/></a></td>
                              <td><xsl:value-of select="@size"/></td>
                            </tr>
                          </xsl:for-each>
                        </table>
                      </xsl:otherwise>
                    </xsl:choose>

                    <xsl:if test="count(dependencies/dependency) &gt; 0">
                      <h2>Dependencies</h2>
                      <table>
                        <tr>
                          <th>name</th>
                          <th>version</th>
                          <th>type</th>
                          <th>description</th>
                        </tr>
                        <xsl:for-each select="dependencies/dependency">
                          <tr>
                            <xsl:choose>
                              <xsl:when test="@href">
                                <td><a href="{@href}"><xsl:value-of select="@id"/></a></td>
                              </xsl:when>
                              <xsl:otherwise>
                                <td><xsl:value-of select="@id"/></td>
                              </xsl:otherwise>
                            </xsl:choose>
                            <td><xsl:value-of select="@version"/></td>
                            <td><xsl:value-of select="@type"/></td>
                            <td><xsl:value-of select="." disable-output-escaping="yes"/></td>
                          </tr>
                        </xsl:for-each>
                      </table>
                    </xsl:if>
                  </div>
                </xsl:for-each>

          </div>

          <div class="sidenav">
            <xsl:copy-of select="$global-sidnav"/>
          </div>

          <div class="clearer"><span></span></div>

        </div>

        <xsl:copy-of select="$footer"/>

      </div>

      </body>

      </html>
    </redirect:write>
  </xsl:template>


  <!--The page for a REST resource.-->
  <xsl:template name="rest-resource">
    <redirect:write file="{$output-dir}/rest{translate(@name,$rest_translate_chars,$rest_translate_replacements)}.html">
      <html>

        <head>
          <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
          <link rel="stylesheet" type="text/css" href="css/style.css" media="screen"/>
          <link rel="stylesheet" type="text/css" href="css/prettify.css" media="screen"/>
          <title>
            <xsl:value-of select="/api-docs/@title"/>
          </title>
        </head>

        <body>

          <div class="container">

            <div class="main">

              <div class="header">
                <div class="title">
                  <h1><xsl:value-of select="/api-docs/@title"/></h1>
                </div>
              </div>

              <div class="content">
                <div class="item">

                  <h1><xsl:value-of select="@name"/></h1>
                  <xsl:if test="((@subcontext) and (not($disable-rest-mountpoint)))">
                    <ul>
                      <li>Mount Point: <a href="{concat($api-relative-path,@subcontext,@name)}"><xsl:value-of select="concat(@subcontext,@name)"/></a></li>
                    </ul>
                  </xsl:if>

                  <xsl:if test="operation">
                    <p>
                      The following operations are supported on this resource:
                    </p>

                    <ul>
                      <xsl:for-each select="operation">
                        <li>
                          <xsl:choose>
                            <xsl:when test="tag[@name='deprecated']">
                              <font style="text-decoration:line-through;">
                                <a href="#{@name}"><xsl:value-of select="@name"/></a>
                              </font>
                              <xsl:for-each select="alias">
                                <font style="text-decoration:line-through;">
                                  <a href="#{../@name}"><xsl:value-of select="."/></a>
                                </font>
                              </xsl:for-each>
                            </xsl:when>
                            <xsl:otherwise>
                              <a href="#{@name}"><xsl:value-of select="@name"/></a>
                              <xsl:for-each select="alias">
                                <a href="#{../@name}"><xsl:value-of select="."/></a>
                              </xsl:for-each>
                            </xsl:otherwise>
                          </xsl:choose>
                        </li>
                      </xsl:for-each>
                    </ul>
                  </xsl:if>
                </div>

                <xsl:for-each select="operation">
                  <div class="item">

                    <h1><a name="{@name}"><xsl:value-of select="@name"/></a></h1>

                    <xsl:if test="alias">
                      <ul>
                        <li>Aliases: <xsl:for-each select="alias"><xsl:value-of select="."/> </xsl:for-each></li>
                      </ul>
                    </xsl:if>

                    <xsl:if test="tag[@name='deprecated']">
                      <p class="deprecated">
                        This method has been deprecated.  <xsl:value-of select="tag[@name='deprecated']" disable-output-escaping="yes"/>.
                      </p>
                    </xsl:if>

                    <xsl:if test="documentation">
                      <p>
                        <xsl:value-of select="documentation" disable-output-escaping="yes"/>
                      </p>
                    </xsl:if>

                    <xsl:if test="parameter">
                      <h2>Parameters</h2>
                      <table>
                        <tr>
                          <th>name</th>
                          <th>description</th>
                          <th>type</th>
                          <th>default</th>
                        </tr>
                        <xsl:for-each select="parameter">
                          <tr>
                            <td><xsl:value-of select="@name"/></td>
                            <td><xsl:value-of select="." disable-output-escaping="yes"/></td>
                            <td><xsl:value-of select="@type"/></td>
                            <td><xsl:value-of select="@defaultValue"/></td>
                          </tr>
                        </xsl:for-each>
                      </table>
                    </xsl:if>

                    <xsl:if test="inValue">
                      <h2>Input Payload</h2>
                      <table>
                        <tr>
                          <th>element</th>
                          <th>consumeable content type(s)</th>
                        </tr>
                        <tr>
                          <xsl:apply-templates select="inValue" mode="schemaLinking" />
                          <td>
                            <ul>
                              <xsl:for-each select="contentType[@consumable='true']">
                                <li><xsl:value-of select="@type"/></li>
                              </xsl:for-each>
                            </ul>
                          </td>
                        </tr>
                        <xsl:if test="inValue/documentation">
                          <tr>
                            <th colspan="2">description</th>
                          </tr>
                          <tr>
                            <td colspan="2">
                              <xsl:value-of select="inValue/documentation" disable-output-escaping="yes" />
                            </td>
                          </tr>
                        </xsl:if>
                      </table>
                    </xsl:if>

                    <xsl:if test="outValue">
                      <h2>Output Payload</h2>
                      <table>
                        <tr>
                          <th>element</th>
                          <th>produceable content type(s)</th>
                        </tr>
                        <tr>
                          <xsl:apply-templates select="outValue" mode="schemaLinking" />
                          <td>
                            <ul>
                              <xsl:for-each select="contentType[@produceable='true']">
                                <li><xsl:value-of select="@type"/><xsl:if test="((@subcontext) and (not($disable-rest-mountpoint)))"> (alternative mount point: <a href="{concat($api-relative-path,@subcontext,../../@name)}"><xsl:value-of select="@subcontext"/></a>)</xsl:if></li>
                              </xsl:for-each>
                            </ul>
                          </td>
                        </tr>
                        <xsl:if test="outValue/documentation">
                          <tr>
                            <th colspan="2">description</th>
                          </tr>
                          <tr>
                            <td colspan="2">
                              <xsl:value-of select="outValue/documentation" disable-output-escaping="yes" />
                            </td>
                          </tr>
                        </xsl:if>
                      </table>
                    </xsl:if>

                    <xsl:if test="error">
                      <h2>Errors</h2>
                      <table>
                        <tr>
                          <th>code</th>
                          <th>description</th>
                        </tr>
                        <xsl:for-each select="error">
                          <tr>
                            <td><xsl:value-of select="@code"/></td>
                            <td><xsl:value-of select="." disable-output-escaping="yes"/></td>
                          </tr>
                        </xsl:for-each>
                      </table>
                    </xsl:if>

                  </div>
                </xsl:for-each>
              </div>

          <div class="sidenav">
            <h1><xsl:value-of select="@name"/></h1>

            <xsl:if test="operation">
              <ul>
                <xsl:for-each select="operation">
                  <li>
                    <xsl:choose>
                      <xsl:when test="tag[@name='deprecated']">
                        <font style="text-decoration:line-through;">
                          <a href="#{@name}"><xsl:value-of select="@name"/></a>
                        </font>
                      </xsl:when>
                      <xsl:otherwise>
                        <a href="#{@name}"><xsl:value-of select="@name"/></a>
                      </xsl:otherwise>
                    </xsl:choose>
                  </li>
                </xsl:for-each>
              </ul>
            </xsl:if>

            <xsl:copy-of select="$global-sidnav"/>
          </div>

          <div class="clearer"><span></span></div>

        </div>

        <xsl:copy-of select="$footer"/>

      </div>

      </body>

      </html>
    </redirect:write>
  </xsl:template>

  <xsl:template match="inValue|outValue" mode="schemaLinking">
    <td>
      <xsl:choose>
        <xsl:when test="xmlElement/@elementName or jsonElement/@elementName">
          <xsl:if test="xmlElement/@elementName">
            <xsl:choose>
              <xsl:when test="xmlElement/@elementSchemaId">
                <a href="data_{xmlElement/@elementSchemaId}.html#element_{xmlElement/@elementName}"><xsl:value-of select="xmlElement/@elementName" /> (XML)</a>
              </xsl:when>
              <xsl:otherwise><xsl:value-of select="xmlElement/@elementName" /> (XML)</xsl:otherwise>
            </xsl:choose>
          </xsl:if>
          <xsl:if test="jsonElement/@elementName">
            <xsl:choose>
              <xsl:when test="jsonElement/@elementSchemaId">
                <a href="data_{jsonElement/@elementSchemaId}.html#element_{jsonElement/@elementName}"><xsl:value-of select="jsonElement/@elementName" /> (JSON)</a>
              </xsl:when>
              <xsl:otherwise><xsl:value-of select="jsonElement/@elementName" /> (JSON)</xsl:otherwise>
            </xsl:choose>
          </xsl:if>
        </xsl:when>
        <xsl:otherwise>(custom)</xsl:otherwise>
      </xsl:choose>
    </td>
  </xsl:template>

  <xsl:template name="data-json-schema">
    <redirect:write file="{$output-dir}/data_{@schemaId}.html">
      <html>
        <head>
          <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
          <link rel="stylesheet" type="text/css" href="css/style.css" media="screen"/>
          <link rel="stylesheet" type="text/css" href="css/prettify.css" media="screen"/>
          <title>
            <xsl:value-of select="/api-docs/@title"/>
          </title>
        </head>
        <body>
          <div class="container">
            <div class="main">
              <div class="header">
                <div class="title">
                  <h1><xsl:value-of select="/api-docs/@title"/></h1>
                </div>
              </div>
              <div class="content">
                <div class="item">
                  <h1>Data<xsl:if test="$multiple_schemas and (string-length(@schemaId) &gt; 0)">: <xsl:value-of select="@schemaId"/></xsl:if></h1>
                  <ul>
                    <li>JSON Schema ID: <u><xsl:value-of select="@schemaId"/></u></li>
                    <xsl:if test="@file">
                      <li>JSON Schema File: <a href="{@file}"><xsl:value-of select="@file"/></a></li>
                    </xsl:if>
                  </ul>
                  <xsl:if test="type">
                    <p>
                      The following types are members of this schema:
                    </p>
                    <ul>
                      <xsl:for-each select="type">
                        <xsl:sort select="@name"/>
                        <li>
                          <a href="#{@name}"><xsl:value-of select="@name"/></a>
                        </li>
                      </xsl:for-each>
                    </ul>
                  </xsl:if>
                </div>
                <xsl:for-each select="type">
                  <xsl:sort select="@name"/>
                  <div class="item">
                    <h1><a name="{@name}">Type <xsl:value-of select="@name"/></a></h1>
                    <xsl:if test="documentation">
                      <p>
                        <xsl:value-of select="documentation" disable-output-escaping="yes"/>
                      </p>
                    </xsl:if>
                    <xsl:if test="property">
                      <h2>Properties</h2>
                      <table>
                        <tr>
                          <th>name</th>
                          <th>type</th>
                          <th>description</th>
                        </tr>
                        <xsl:for-each select="property">
                          <tr>
                            <td><xsl:value-of select="@name"/></td>
                            <td><xsl:if test="@isList = 'true'">List of </xsl:if>
                              <xsl:choose>
                                <xsl:when test="@typeSchemaId"><a href="data_{@typeSchemaId}.html#{@typeName}"><xsl:value-of select="@typeName"/></a></xsl:when>
                                <xsl:otherwise><xsl:value-of select="@typeName"/></xsl:otherwise>
                              </xsl:choose>
                            </td>
                            <td><xsl:value-of select="@documentation" disable-output-escaping="yes"/></td>
                          </tr>
                        </xsl:for-each>
                      </table>
                    </xsl:if>
                    <xsl:if test="enumValue">
                      <h2>Possible Values</h2>
                      <table>
                        <tr>
                          <th>value</th>
                          <th>description</th>
                        </tr>
                        <xsl:for-each select="enumValue">
                          <tr>
                            <td><xsl:value-of select="value"/></td>
                            <td><xsl:value-of select="documentation" disable-output-escaping="yes"/></td>
                          </tr>
                        </xsl:for-each>
                      </table>
                    </xsl:if>
                  </div>
                </xsl:for-each>
              </div>
              <div class="sidenav">
                <xsl:copy-of select="$global-sidnav"/>
              </div>
              <div class="clearer"><span></span></div>
            </div>
          <xsl:copy-of select="$footer"/>
          </div>
        </body>
      </html>
    </redirect:write>
  </xsl:template>

  <!--The documentation page for a schema.-->
  <xsl:template name="data-schema">
    <redirect:write file="{$output-dir}/data_{@namespaceId}.html">
      <html>

        <head>
          <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
          <link rel="stylesheet" type="text/css" href="css/style.css" media="screen"/>
          <link rel="stylesheet" type="text/css" href="css/prettify.css" media="screen"/>
          <title>
            <xsl:value-of select="/api-docs/@title"/>
          </title>
        </head>

        <body>

          <div class="container">

            <div class="main">

              <div class="header">
                <div class="title">
                  <h1><xsl:value-of select="/api-docs/@title"/></h1>
                </div>
              </div>

              <div class="content">
                <div class="item">

                  <h1>Data<xsl:if test="$multiple_schemas and (string-length(@namespace) &gt; 0)">: <xsl:value-of select="@namespaceId"/></xsl:if></h1>

                  <ul>
                    <xsl:choose>
                      <xsl:when test="string-length(@namespace) = 0">
                        <li>Default Namespace</li>
                      </xsl:when>
                      <xsl:otherwise>
                        <li>Namespace: <u><xsl:value-of select="@namespace"/></u></li>
                      </xsl:otherwise>
                    </xsl:choose>
                    <xsl:if test="@file">
                      <li>XML Schema File: <a href="{@file}"><xsl:value-of select="@file"/></a></li>
                    </xsl:if>
                  </ul>

                  <p>The data in this namespace is divided into elements and types. Types define the structure
                    of the data. Elements define specific instances of the types, and are therefore more relevant to
                    REST endpoints, which generally consume and/or produce elements.</p>

                  <xsl:if test="elements/element">
                    <p>
                      The following elements are members of this namespace:
                    </p>

                    <ul>
                      <xsl:for-each select="elements/element">
                        <xsl:sort select="@name"/>
                        <li>
                          <xsl:choose>
                            <xsl:when test="tag[@name='deprecated']">
                              <font style="text-decoration:line-through;">
                                <a href="#element_{@name}"><xsl:value-of select="@name"/></a>
                              </font>
                            </xsl:when>
                            <xsl:otherwise>
                              <a href="#element_{@name}"><xsl:value-of select="@name"/></a>
                            </xsl:otherwise>
                          </xsl:choose>
                        </li>
                      </xsl:for-each>
                    </ul>
                  </xsl:if>

                  <xsl:if test="types/type">
                    <p>
                      The following types are members of this namespace:
                    </p>

                    <ul>
                      <xsl:for-each select="types/type">
                        <xsl:sort select="@name"/>
                        <li>
                          <xsl:choose>
                            <xsl:when test="tag[@name='deprecated']">
                              <font style="text-decoration:line-through;">
                                <a href="#{@name}"><xsl:value-of select="@name"/></a>
                              </font>
                            </xsl:when>
                            <xsl:otherwise>
                              <a href="#{@name}"><xsl:value-of select="@name"/></a>
                            </xsl:otherwise>
                          </xsl:choose>
                        </li>
                      </xsl:for-each>
                    </ul>
                  </xsl:if>

                </div>

                <xsl:for-each select="elements/element">
                  <xsl:sort select="@name"/>
                  <div class="item">

                    <h1><a name="element_{@name}">Element <xsl:value-of select="@name"/></a></h1>

                    <xsl:if test="@typeSchemaId and @typeName">
                      <ul>
                        <li>Type: <a href="data_{@typeSchemaId}.html#{@typeName}"><xsl:value-of select="@typeName"/></a></li>
                      </ul>
                    </xsl:if>

                    <xsl:if test="tag[@name='deprecated']">
                      <p class="deprecated">
                        This element has been deprecated.  <xsl:value-of select="tag[@name='deprecated']" disable-output-escaping="yes"/>.
                      </p>
                    </xsl:if>

                    <xsl:if test="documentation">
                      <p>
                        <xsl:value-of select="documentation" disable-output-escaping="yes"/>
                      </p>
                    </xsl:if>

                    <xsl:if test="examplexml and (string-length(examplexml) &gt; 1)">
                      <h2>Example XML</h2>
                      <code><xsl:value-of select="examplexml"/></code>
                    </xsl:if>

                    <xsl:if test="examplejson and (string-length(examplejson) &gt; 1)">
                      <h2>Example JSON</h2>
                      <code><xsl:value-of select="examplejson"/></code>
                    </xsl:if>
                  </div>
                </xsl:for-each>

                <xsl:for-each select="types/type">
                  <xsl:sort select="@name"/>

                  <div class="item">

                    <h1><a name="{@name}">Type <xsl:value-of select="@name"/></a></h1>
                    <xsl:if test="@extendsType">
                      <xsl:variable name="typeId" select="@extendsType"/>
                      <xsl:variable name="extendedType" select="//type[@id=$typeId]"/>
                      <ul>
                        <li>Extends: <a href="data_{$extendedType/../../@namespaceId}.html#{$extendedType/@name}"><xsl:value-of select="$extendedType/@name"/></a></li>
                      </ul>
                    </xsl:if>

                    <xsl:if test="tag[@name='deprecated']">
                      <p class="deprecated">
                        This type has been deprecated.  <xsl:value-of select="tag[@name='deprecated']" disable-output-escaping="yes"/>.
                      </p>
                    </xsl:if>

                    <xsl:if test="documentation">
                      <p>
                        <xsl:value-of select="documentation" disable-output-escaping="yes"/>
                      </p>
                    </xsl:if>

                    <xsl:if test="attributes">
                      <h2>Attributes</h2>
                      <table>
                        <tr>
                          <th>name</th>
                          <th>type</th>
                          <th>description</th>
                        </tr>
                        <xsl:for-each select="attributes/attribute">
                          <tr>
                            <td><xsl:value-of select="@name"/></td>
                            <td>
                              <xsl:choose>
                                <xsl:when test="@typeSchemaId"><a href="data_{@typeSchemaId}.html#{@typeName}"><xsl:value-of select="@typeName"/></a></xsl:when>
                                <xsl:otherwise><xsl:value-of select="@typeName"/></xsl:otherwise>
                              </xsl:choose>
                            </td>
                            <td><xsl:value-of select="." disable-output-escaping="yes"/></td>
                          </tr>
                        </xsl:for-each>
                      </table>
                    </xsl:if>

                    <xsl:if test="elements">
                      <h2>Child Elements</h2>
                      <table>
                        <tr>
                          <th>name (type)</th>
                          <th>min/max <br/>occurs</th>
                          <th>description</th>
                        </tr>
                        <xsl:for-each select="elements/element">
                          <tr>
                            <td>
                              <xsl:for-each select="choice">
                                <xsl:if test="position() &gt; 1"><br/>or </xsl:if>
                                <xsl:choose>
                                  <xsl:when test="@schemaId"><a href="data_{@schemaId}.html#element_{@name}"><xsl:value-of select="@name"/></a></xsl:when>
                                  <xsl:otherwise><xsl:value-of select="@name"/></xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                  <xsl:when test="@typeSchemaId"> (<a href="data_{@typeSchemaId}.html#{@typeName}"><xsl:value-of select="@typeName"/></a>)</xsl:when>
                                  <xsl:otherwise> (<xsl:value-of select="@typeName"/>)</xsl:otherwise>
                                </xsl:choose>
                              </xsl:for-each>
                            </td>
                            <td><xsl:value-of select="@minOccurs"/>/<xsl:value-of select="@maxOccurs"/></td>
                            <xsl:choose>
                              <xsl:when test="documentation">
                                <td><xsl:value-of select="documentation" disable-output-escaping="yes"/></td>
                              </xsl:when>
                              <xsl:otherwise>
                                <td>(no documentation provided)</td>
                              </xsl:otherwise>
                            </xsl:choose>
                          </tr>
                        </xsl:for-each>
                      </table>
                    </xsl:if>

                    <xsl:if test="value">
                      <h2>Value</h2>
                      <ul>
                        <li>
                          Type:
                          <xsl:choose>
                            <xsl:when test="value/@typeSchemaId"><a href="data_{value/@typeSchemaId}.html#{value/@typeName}"><xsl:value-of select="value/@typeName"/></a></xsl:when>
                            <xsl:otherwise><xsl:value-of select="value/@typeName"/></xsl:otherwise>
                          </xsl:choose>
                        </li>
                      </ul>

                      <p><xsl:value-of select="value" disable-output-escaping="yes"/></p>
                    </xsl:if>

                    <xsl:if test="values">
                      <h2>Possible Values</h2>
                      <table>
                        <tr>
                          <th>value</th>
                          <th>description</th>
                        </tr>
                        <xsl:for-each select="values/item">
                          <tr>
                            <xsl:choose>
                              <xsl:when test="tag[@name='deprecated']">
                                <td><font style="text-decoration:line-through;"><xsl:value-of select="@value"/></font></td>
                              </xsl:when>
                              <xsl:otherwise>
                                <td><xsl:value-of select="@value"/></td>
                              </xsl:otherwise>
                            </xsl:choose>
                            <td><xsl:value-of select="documentation" disable-output-escaping="yes"/></td>
                          </tr>
                        </xsl:for-each>
                      </table>
                    </xsl:if>

                  </div>
                </xsl:for-each>
              </div>

          <div class="sidenav">
            <xsl:copy-of select="$global-sidnav"/>
          </div>

          <div class="clearer"><span></span></div>

        </div>

        <xsl:copy-of select="$footer"/>

      </div>

      </body>

      </html>
    </redirect:write>
  </xsl:template>

</xsl:stylesheet>
